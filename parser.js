/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[10,33],$V1=[2,7],$V2=[1,8],$V3=[2,18],$V4=[1,11],$V5=[6,10,15,33,52,53,57,64,65,66,71,97,98,99,100,101,102,103,104],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[6,7],$Va=[25,31],$Vb=[2,10],$Vc=[1,25],$Vd=[2,14],$Ve=[1,29],$Vf=[2,23],$Vg=[1,54],$Vh=[2,32],$Vi=[1,48],$Vj=[1,49],$Vk=[1,50],$Vl=[1,64],$Vm=[1,65],$Vn=[1,66],$Vo=[1,55],$Vp=[1,56],$Vq=[1,57],$Vr=[1,58],$Vs=[1,59],$Vt=[1,60],$Vu=[1,61],$Vv=[1,62],$Vw=[1,63],$Vx=[6,15,52,53,57,64,65,66,71,97,98,99,100,101,102,103,104],$Vy=[1,81],$Vz=[2,28],$VA=[1,113],$VB=[1,107],$VC=[1,108],$VD=[1,109],$VE=[1,110],$VF=[1,115],$VG=[1,118],$VH=[7,12,29,31,51,68,74,77,80,81,82,83,84,85,88,89,92,93],$VI=[1,136],$VJ=[1,140],$VK=[2,16],$VL=[7,12,29,31],$VM=[7,12,29,31,74],$VN=[7,12,29,31,74,77],$VO=[7,12,29,31,74,77,80,81,82,83,84,85],$VP=[7,12,29,31,74,77,80,81,82,83,84,85,88,89],$VQ=[7,12,29,31,74,77,80,81,82,83,84,85,88,89,92,93],$VR=[2,47],$VS=[1,164],$VT=[12,31],$VU=[12,68];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"start":3,"program":4,"PROGRAM":5,"ID":6,";":7,"vars_sec":8,"funcs_sec":9,"MAIN":10,"(":11,")":12,"{":13,"statements":14,"}":15,"EOF":16,"type":17,"INT":18,"FLOAT":19,"CHAR":20,"vars":21,"VARS":22,"var_arr":23,"vars_same_type":24,":":25,"mult_dec":26,"[":27,"CTE_INT":28,"]":29,"var_mat":30,",":31,"func":32,"FUNCTION":33,"func_type":34,"params":35,"VOID":36,"mult_params":37,"var":38,"id_arr":39,"expression":40,"id_mat":41,"statement":42,"assignment":43,"read":44,"write":45,"conditional":46,"loop":47,"void_func_call":48,"return":49,"sp_func":50,"=":51,"READ":52,"PRINT":53,"write_ops":54,"mult_write":55,"CTE_STRING":56,"IF":57,"cond_else":58,"ELSE":59,"else_type":60,"while_loop":61,"do_while_loop":62,"for_loop":63,"WHILE":64,"DO":65,"FOR":66,"for_type":67,"TO":68,"args":69,"mult_arg":70,"RETURN":71,"and_expression":72,"exp_comp":73,"|":74,"relop_expression":75,"and_exp_comp":76,"&":77,"arit_expression":78,"relop_exp_comp":79,">=":80,"<=":81,">":82,"<":83,"==":84,"!=":85,"term":86,"arit_exp_comp":87,"+":88,"-":89,"factor":90,"term_comp":91,"*":92,"/":93,"CTE_FLOAT":94,"CTE_CHAR":95,"func_call":96,"MEAN":97,"MEDIAN":98,"MODE":99,"VARIANCE":100,"STDEV":101,"MIN":102,"MAX":103,"PLOT2D":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"PROGRAM",6:"ID",7:";",10:"MAIN",11:"(",12:")",13:"{",15:"}",16:"EOF",18:"INT",19:"FLOAT",20:"CHAR",22:"VARS",25:":",27:"[",28:"CTE_INT",29:"]",31:",",33:"FUNCTION",36:"VOID",51:"=",52:"READ",53:"PRINT",56:"CTE_STRING",57:"IF",59:"ELSE",64:"WHILE",65:"DO",66:"FOR",68:"TO",71:"RETURN",74:"|",77:"&",80:">=",81:"<=",82:">",83:"<",84:"==",85:"!=",88:"+",89:"-",92:"*",93:"/",94:"CTE_FLOAT",95:"CTE_CHAR",97:"MEAN",98:"MEDIAN",99:"MODE",100:"VARIANCE",101:"STDEV",102:"MIN",103:"MAX",104:"PLOT2D"},
productions_: [0,[3,1],[4,12],[17,1],[17,1],[17,1],[8,1],[8,0],[21,10],[23,4],[23,0],[30,3],[30,0],[24,4],[24,0],[26,6],[26,0],[9,2],[9,0],[32,10],[34,1],[34,1],[35,3],[35,0],[37,2],[37,0],[38,2],[39,4],[39,0],[41,3],[41,0],[14,2],[14,0],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[43,4],[44,5],[45,6],[54,1],[54,1],[55,3],[55,0],[46,8],[58,2],[58,0],[60,3],[60,1],[47,1],[47,1],[47,1],[61,7],[62,9],[63,9],[67,1],[67,1],[48,5],[69,2],[70,2],[70,0],[49,5],[40,2],[73,2],[73,0],[72,2],[76,2],[76,0],[75,2],[79,2],[79,2],[79,2],[79,2],[79,2],[79,2],[79,0],[78,2],[87,2],[87,2],[87,0],[86,2],[91,2],[91,2],[91,0],[90,3],[90,1],[90,1],[90,1],[90,1],[90,1],[96,5],[50,5],[50,5],[50,5],[50,5],[50,5],[50,5],[50,5],[50,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log('todo bien')
break;
case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 94: case 95: case 96: case 97: case 98: case 99: case 100: case 101: case 102:

break;
case 93:
console.log('Llamada a funcion')
break;
}
},
table: [{3:1,4:2,5:[1,3]},{1:[3]},{1:[2,1]},{6:[1,4]},{7:[1,5]},o($V0,$V1,{8:6,21:7,22:$V2}),{9:9,10:$V3,32:10,33:$V4},o($V5,[2,6]),{13:[1,12]},{10:[1,13]},{9:14,10:$V3,32:10,33:$V4},{17:16,18:$V6,19:$V7,20:$V8,34:15,36:[1,17]},{6:[1,21]},{11:[1,22]},{10:[2,17]},{6:[1,23]},{6:[2,20]},{6:[2,21]},o($V9,[2,3]),o($V9,[2,4]),o($V9,[2,5]),o($Va,$Vb,{23:24,27:$Vc}),{12:[1,26]},{11:[1,27]},{24:28,25:$Vd,31:$Ve},{28:[1,30]},{13:[1,31]},{12:$Vf,17:33,18:$V6,19:$V7,20:$V8,35:32},{25:[1,34]},{6:[1,35]},{29:[1,36]},{6:$Vg,14:37,15:$Vh,38:47,42:38,43:39,44:40,45:41,46:42,47:43,48:44,49:45,50:46,52:$Vi,53:$Vj,57:$Vk,61:51,62:52,63:53,64:$Vl,65:$Vm,66:$Vn,71:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{12:[1,67]},{6:[1,68]},{17:69,18:$V6,19:$V7,20:$V8},o($Va,$Vb,{23:70,27:$Vc}),o($Va,[2,12],{30:71,27:[1,72]}),{15:[1,73]},{6:$Vg,14:74,15:$Vh,38:47,42:38,43:39,44:40,45:41,46:42,47:43,48:44,49:45,50:46,52:$Vi,53:$Vj,57:$Vk,61:51,62:52,63:53,64:$Vl,65:$Vm,66:$Vn,71:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},o($Vx,[2,33]),o($Vx,[2,34]),o($Vx,[2,35]),o($Vx,[2,36]),o($Vx,[2,37]),o($Vx,[2,38]),o($Vx,[2,39]),o($Vx,[2,40]),{51:[1,75]},{11:[1,76]},{11:[1,77]},{11:[1,78]},o($Vx,[2,53]),o($Vx,[2,54]),o($Vx,[2,55]),{11:[1,79],27:$Vy,39:80,51:$Vz},{11:[1,82]},{11:[1,83]},{11:[1,84]},{11:[1,85]},{11:[1,86]},{11:[1,87]},{11:[1,88]},{11:[1,89]},{11:[1,90]},{11:[1,91]},{13:[1,92]},{11:[1,93]},{13:[1,94]},{12:[2,25],31:[1,96],37:95},{7:[1,97]},{24:98,25:$Vd,31:$Ve},o($Va,[2,9]),{28:[1,99]},{16:[1,100]},{15:[2,31]},{6:$VA,11:$VB,28:$VC,38:111,40:101,72:102,75:103,78:104,86:105,90:106,94:$VD,95:$VE,96:112},{6:$VF,38:114},{6:$VF,38:117,54:116,56:$VG},{6:$VA,11:$VB,28:$VC,38:111,40:119,72:102,75:103,78:104,86:105,90:106,94:$VD,95:$VE,96:112},{6:$VA,11:$VB,28:$VC,38:111,40:121,69:120,72:102,75:103,78:104,86:105,90:106,94:$VD,95:$VE,96:112},o($VH,[2,26]),{6:$VA,11:$VB,28:$VC,38:111,40:122,72:102,75:103,78:104,86:105,90:106,94:$VD,95:$VE,96:112},{6:$VA,11:$VB,28:$VC,38:111,40:123,72:102,75:103,78:104,86:105,90:106,94:$VD,95:$VE,96:112},{6:$VF,38:124},{6:$VF,38:125},{6:$VF,38:126},{6:$VF,38:127},{6:$VF,38:128},{6:$VF,38:129},{6:$VF,38:130},{6:$VF,38:131},{6:$VA,11:$VB,28:$VC,38:111,40:132,72:102,75:103,78:104,86:105,90:106,94:$VD,95:$VE,96:112},{6:$Vg,14:133,15:$Vh,38:47,42:38,43:39,44:40,45:41,46:42,47:43,48:44,49:45,50:46,52:$Vi,53:$Vj,57:$Vk,61:51,62:52,63:53,64:$Vl,65:$Vm,66:$Vn,71:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{6:$VF,28:$VI,38:135,67:134},o($Vx,$V1,{21:7,8:137,22:$V2}),{12:[2,22]},{12:$Vf,17:33,18:$V6,19:$V7,20:$V8,35:138},{6:$VJ,15:$VK,26:139},{25:[2,13]},{29:[1,141]},{1:[2,2]},{7:[1,142]},o($VL,[2,68],{73:143,74:[1,144]}),o($VM,[2,71],{76:145,77:[1,146]}),o($VN,[2,79],{79:147,80:[1,148],81:[1,149],82:[1,150],83:[1,151],84:[1,152],85:[1,153]}),o($VO,[2,83],{87:154,88:[1,155],89:[1,156]}),o($VP,[2,87],{91:157,92:[1,158],93:[1,159]}),{6:$VA,11:$VB,28:$VC,38:111,40:160,72:102,75:103,78:104,86:105,90:106,94:$VD,95:$VE,96:112},o($VQ,[2,89]),o($VQ,[2,90]),o($VQ,[2,91]),o($VQ,[2,92]),o($VQ,[2,93]),o($VQ,$Vz,{39:80,11:[1,161],27:$Vy}),{12:[1,162]},o([12,31,68],$Vz,{39:80,27:$Vy}),{12:$VR,31:$VS,55:163},o($VT,[2,44]),o($VT,[2,45]),{12:[1,165]},{12:[1,166]},{12:[2,64],31:[1,168],70:167},{29:[1,169]},{12:[1,170]},{12:[1,171]},{12:[1,172]},{12:[1,173]},{12:[1,174]},{12:[1,175]},{12:[1,176]},{12:[1,177]},{12:[1,178]},{12:[1,179]},{15:[1,180]},{68:[1,181]},o($VU,[2,59]),o($VU,[2,60]),{6:$Vg,14:182,15:$Vh,38:47,42:38,43:39,44:40,45:41,46:42,47:43,48:44,49:45,50:46,52:$Vi,53:$Vj,57:$Vk,61:51,62:52,63:53,64:$Vl,65:$Vm,66:$Vn,71:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{12:[2,24]},{15:[1,183]},{24:184,25:$Vd,31:$Ve},o($Va,[2,11]),o($Vx,[2,41]),o($VL,[2,66]),{6:$VA,11:$VB,28:$VC,38:111,40:185,72:102,75:103,78:104,86:105,90:106,94:$VD,95:$VE,96:112},o($VM,[2,69]),{6:$VA,11:$VB,28:$VC,38:111,72:186,75:103,78:104,86:105,90:106,94:$VD,95:$VE,96:112},o($VN,[2,72]),{6:$VA,11:$VB,28:$VC,38:111,78:187,86:105,90:106,94:$VD,95:$VE,96:112},{6:$VA,11:$VB,28:$VC,38:111,78:188,86:105,90:106,94:$VD,95:$VE,96:112},{6:$VA,11:$VB,28:$VC,38:111,78:189,86:105,90:106,94:$VD,95:$VE,96:112},{6:$VA,11:$VB,28:$VC,38:111,78:190,86:105,90:106,94:$VD,95:$VE,96:112},{6:$VA,11:$VB,28:$VC,38:111,78:191,86:105,90:106,94:$VD,95:$VE,96:112},{6:$VA,11:$VB,28:$VC,38:111,78:192,86:105,90:106,94:$VD,95:$VE,96:112},o($VO,[2,80]),{6:$VA,11:$VB,28:$VC,38:111,78:193,86:105,90:106,94:$VD,95:$VE,96:112},{6:$VA,11:$VB,28:$VC,38:111,78:194,86:105,90:106,94:$VD,95:$VE,96:112},o($VP,[2,84]),{6:$VA,11:$VB,28:$VC,38:111,86:195,90:106,94:$VD,95:$VE,96:112},{6:$VA,11:$VB,28:$VC,38:111,86:196,90:106,94:$VD,95:$VE,96:112},{12:[1,197]},{6:$VA,11:$VB,28:$VC,38:111,40:121,69:198,72:102,75:103,78:104,86:105,90:106,94:$VD,95:$VE,96:112},{7:[1,199]},{12:[1,200]},{6:$VF,38:117,54:201,56:$VG},{13:[1,202]},{7:[1,203]},{12:[2,62]},{6:$VA,11:$VB,28:$VC,38:111,40:121,69:204,72:102,75:103,78:104,86:105,90:106,94:$VD,95:$VE,96:112},o($VH,[2,30],{41:205,27:[1,206]}),{7:[1,207]},{7:[1,208]},{7:[1,209]},{7:[1,210]},{7:[1,211]},{7:[1,212]},{7:[1,213]},{7:[1,214]},{7:[1,215]},{13:[1,216]},{64:[1,217]},{6:$VF,28:$VI,38:135,67:218},{15:[1,219]},o($V5,[2,8]),{25:[1,220]},o($VL,[2,67]),o($VM,[2,70]),o($VN,[2,73]),o($VN,[2,74]),o($VN,[2,75]),o($VN,[2,76]),o($VN,[2,77]),o($VN,[2,78]),o($VO,[2,81]),o($VO,[2,82]),o($VP,[2,85]),o($VP,[2,86]),o($VQ,[2,88]),{12:[1,221]},o($Vx,[2,42]),{7:[1,222]},{12:$VR,31:$VS,55:223},{6:$Vg,14:224,15:$Vh,38:47,42:38,43:39,44:40,45:41,46:42,47:43,48:44,49:45,50:46,52:$Vi,53:$Vj,57:$Vk,61:51,62:52,63:53,64:$Vl,65:$Vm,66:$Vn,71:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},o($Vx,[2,61]),{12:[2,63]},o($VH,[2,27]),{6:$VA,11:$VB,28:$VC,38:111,40:225,72:102,75:103,78:104,86:105,90:106,94:$VD,95:$VE,96:112},o($Vx,[2,65]),o($Vx,[2,95]),o($Vx,[2,96]),o($Vx,[2,97]),o($Vx,[2,98]),o($Vx,[2,99]),o($Vx,[2,100]),o($Vx,[2,101]),o($Vx,[2,102]),{6:$Vg,14:226,15:$Vh,38:47,42:38,43:39,44:40,45:41,46:42,47:43,48:44,49:45,50:46,52:$Vi,53:$Vj,57:$Vk,61:51,62:52,63:53,64:$Vl,65:$Vm,66:$Vn,71:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{11:[1,227]},{12:[1,228]},o($V0,[2,19]),{17:229,18:$V6,19:$V7,20:$V8},{7:[1,230]},o($Vx,[2,43]),{12:[2,46]},{15:[1,231]},{29:[1,232]},{15:[1,233]},{6:$VA,11:$VB,28:$VC,38:111,40:234,72:102,75:103,78:104,86:105,90:106,94:$VD,95:$VE,96:112},{13:[1,235]},{7:[1,236]},o($VQ,[2,94]),o($Vx,[2,50],{58:237,59:[1,238]}),o($VH,[2,29]),o($Vx,[2,56]),{12:[1,239]},{6:$Vg,14:240,15:$Vh,38:47,42:38,43:39,44:40,45:41,46:42,47:43,48:44,49:45,50:46,52:$Vi,53:$Vj,57:$Vk,61:51,62:52,63:53,64:$Vl,65:$Vm,66:$Vn,71:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{6:$VJ,15:$VK,26:241},o($Vx,[2,48]),{13:[1,243],46:244,57:$Vk,60:242},{7:[1,245]},{15:[1,246]},{15:[2,15]},o($Vx,[2,49]),{6:$Vg,14:247,15:$Vh,38:47,42:38,43:39,44:40,45:41,46:42,47:43,48:44,49:45,50:46,52:$Vi,53:$Vj,57:$Vk,61:51,62:52,63:53,64:$Vl,65:$Vm,66:$Vn,71:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},o($Vx,[2,52]),o($Vx,[2,57]),o($Vx,[2,58]),{15:[1,248]},o($Vx,[2,51])],
defaultActions: {2:[2,1],14:[2,17],16:[2,20],17:[2,21],74:[2,31],95:[2,22],98:[2,13],100:[2,2],138:[2,24],167:[2,62],204:[2,63],223:[2,46],241:[2,15]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skips whisespace */
break;
case 1:return 5
break;
case 2:return 22
break;
case 3:return 10
break;
case 4:return 18
break;
case 5:return 19
break;
case 6:return 20
break;
case 7:return 33
break;
case 8:return 36
break;
case 9:return 71
break;
case 10:return 97
break;
case 11:return 98
break;
case 12:return 99
break;
case 13:return 100
break;
case 14:return 101
break;
case 15:return 102
break;
case 16:return 103
break;
case 17:return 104
break;
case 18:return 52
break;
case 19:return 53
break;
case 20:return 57
break;
case 21:return 59
break;
case 22:return 64
break;
case 23:return 65
break;
case 24:return 66
break;
case 25:return 68
break;
case 26:return 6
break;
case 27:return 94
break;
case 28:return 28
break;
case 29:return 56
break;
case 30:return 95
break;
case 31:return 7
break;
case 32:return 25
break;
case 33:return 31
break;
case 34:return 13
break;
case 35:return 15
break;
case 36:return 11
break;
case 37:return 12
break;
case 38:return 27
break;
case 39:return 29
break;
case 40:return 80
break;
case 41:return 81
break;
case 42:return 82
break;
case 43:return 83
break;
case 44:return 84
break;
case 45:return 51
break;
case 46:return 85
break;
case 47:return 77
break;
case 48:return 74
break;
case 49:return 88
break;
case 50:return 89
break;
case 51:return 92
break;
case 52:return 93
break;
case 53:return 16
break;
case 54:return 'ERROR'
break;
}
},
rules: [/^(?:\s+)/,/^(?:program)/,/^(?:vars)/,/^(?:main)/,/^(?:int)/,/^(?:float)/,/^(?:char)/,/^(?:function)/,/^(?:void)/,/^(?:return)/,/^(?:mean)/,/^(?:median)/,/^(?:mode)/,/^(?:variance)/,/^(?:stdev)/,/^(?:min)/,/^(?:max)/,/^(?:plot2d)/,/^(?:read)/,/^(?:print)/,/^(?:if)/,/^(?:else)/,/^(?:while)/,/^(?:do)/,/^(?:for)/,/^(?:to)/,/^(?:([a-zA-Z])(([a-zA-Z])|([0-9]))*)/,/^(?:(([0-9])+)\.(([0-9])+))/,/^(?:(([0-9])+))/,/^(?:\'((([a-zA-Z])+)|(([0-9])+)|( ))*\')/,/^(?:\'(([a-zA-Z])|([0-9])))/,/^(?:\;)/,/^(?:\:)/,/^(?:\,)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\>=)/,/^(?:\<=)/,/^(?:\>)/,/^(?:\<)/,/^(?:\==)/,/^(?:\=)/,/^(?:\!=)/,/^(?:\&)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}